return ResponseEntity.ok(body); // 200 OK
return new ResponseEntity<>(body, HttpStatus.CREATED); // 201 Created
return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null); // 404
return ResponseEntity.noContent().build(); // 204 No Content

-------------------------------------
create
new RE<>(obj,Hs.Created)

Get -All
 re.ok(obj)
 re.nocontent().build();
-----------------------------
Get -one
re.ok(obj)
re.status(hs.notFound).body(null)

update
re.ok(obj)
re.status(hs.notfound).body("");

delete
re.ok("")
re.status(hs.nf).body("");



--------------------------------------------------------------------------------------------
Entity -variations
--------------------------------------------------------------------------------------------

    // âœ… Primary Key with Auto-generation
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    // âœ… Column + Validation
    @Column(name = "product_name", nullable = false, unique = true, length = 100)
    @NotBlank(message = "Product name is required")
    private String name;

    @Column(nullable = false)
    @Min(value = 1, message = "Price must be positive")
    private double price;

    // âœ… Enum Mapping
    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private ProductStatus status;

   

--------------------------------------------------------------------------------------------
Relationships
--------------------------------------------------------------------------------------------
One to One
user ---->profile

@OneToOne(cascade = CascadeType.ALL)
@JoinColumn(name = "profile_id", referencedColumnName = "id")
private Profile profile;

@OneToOne(mappedBy = "profile")
private User user;



--------------------------------------------------------------------------------------------

Trainer 	Trainings       @OneToMany mapped by same class +  Private list name
 one     --->     many          @ManyToONe - Join Column -id of other clss + object of mappedname
--------------------------------------------------------------------------------------------


Trainer
@OneToMany(mappedBy = "trainer", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Training> trainings;

-----

Trainings
@ManyToOne
@JoinColumn(name = "trainer_id")
  private Trainer trainer;

--------------------------------------------------------------------------------------------
one---->many
customer  ----->orders
--------------------------------------------------------------------------------------------

Customer

@OneToMany(mappedBy = "customer", cascade = CascadeType.ALL)
private List<Order> orders;


----

Order
@ManyToOne
@JoinColumn(name = "customer_id")
private Customer customer;


--------------------------------------------------------------------------------------------
	
Many to Many
students-----> course
--------------------------------------------------------------------------------------------

@ManyToMany
@JoinTable(
    name = "student_course",
    joinColumns = @JoinColumn(name = "student_id"),
    inverseJoinColumns = @JoinColumn(name = "course_id")
)
private List<Course> courses;

-----


@ManyToMany(mappedBy = "courses")
private List<Student> students;






--------------------------------------------------------------------------------------------
Services variations
--------------------------------------------------------------------------------------------
	


       private final List<Stock> stocks = new ArrayList<>();
           private static int counter = 0;
    private final List<Booking> bookingList = new ArrayList<>();

      public Booking getBookingById(int id) {
        return bookingList.stream().filter(b -> b.getId() == id).findFirst().orElse(null);
    }


    @PostMapping
    public Stock create(@RequestBody Stock stock) {
        return stockService.addStock(stock);
    }

    @GetMapping
    public List<Stock> getAll() {
        return stockService.getAllStocks();
    }

    @GetMapping("/{id}")
    public ResponseEntity<Stock> getById(@PathVariable long id) {
        return stockService.getStockById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @PutMapping("/{id}")
    public ResponseEntity<?> update(@PathVariable long id, @RequestBody Stock stock) {
        return stockService.updateStock(id, stock)
                ? ResponseEntity.ok().build()
                : ResponseEntity.notFound().build();
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<?> delete(@PathVariable long id) {
        return stockService.deleteStock(id)
                ? ResponseEntity.ok().build()
                : ResponseEntity.notFound().build();
    }

    @GetMapping("/search")
    public List<Stock> findByName(@RequestParam String name) {
        return stockService.findByName(name);
    }

    @GetMapping("/filter")
    public List<Stock> priceRange(@RequestParam double min, @RequestParam double max) {
        return stockService.findByPriceRange(min, max);
    }

    @GetMapping("/sorted/asc")
    public List<Stock> sortAsc() {
        return stockService.getStocksSortedByPriceAsc();
    }

    @GetMapping("/sorted/desc")
    public List<Stock> sortDesc() {
        return stockService.getStocksSortedByPriceDesc();
    }
}

--------------------------------------------------------------------------------------------
controller variations
--------------------------------------------------------------------------------------------
package com.wecp.stockbrokeragefirm.controller;

import com.wecp.stockbrokeragefirm.entity.Stock;
import com.wecp.stockbrokeragefirm.service.StockService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/stocks")
public class StockController {

    @Autowired
    private StockService stockService;

    // ðŸ”¹ 1. CREATE
    @PostMapping
    public ResponseEntity<Stock> addStock(@RequestBody Stock stock) {
        Stock created = stockService.addStock(stock);
        URI location = URI.create("/stocks/" + created.getId());
        return ResponseEntity.created(location).body(created); // 201 + Location
    }

    // ðŸ”¹ 2. GET ALL
    @GetMapping
    public ResponseEntity<List<Stock>> getAllStocks() {
        List<Stock> stocks = stockService.getAllStocks();
        if (stocks.isEmpty()) {
            return ResponseEntity.noContent().build(); // 204 No Content
        }
        return ResponseEntity.ok(stocks); // 200 OK
    }

    // ðŸ”¹ 3. GET BY ID
    @GetMapping("/{id}")
    public ResponseEntity<Stock> getStockById(@PathVariable long id) {
        return stockService.getStockById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND)
                        .body(null)); // 404
    }

    // ðŸ”¹ 4. UPDATE STOCK
    @PutMapping("/{id}")
    public ResponseEntity<?> updateStock(@PathVariable long id, @RequestBody Stock updatedStock) {
        boolean updated = stockService.updateStock(id, updatedStock);
        if (updated) {
            return ResponseEntity.ok("Stock updated successfully"); // 200 OK
        }
        return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Stock not found");
    }

    // ðŸ”¹ 5. DELETE BY ID
    @DeleteMapping("/{id}")
    public ResponseEntity<String> deleteStock(@PathVariable long id) {
        boolean deleted = stockService.deleteStock(id);
        if (deleted) {
            return ResponseEntity.ok("Stock deleted successfully");
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Stock not found");
        }
    }

    // ðŸ”¹ 6. FIND BY NAME
    @GetMapping("/search")
    public ResponseEntity<List<Stock>> findByName(@RequestParam String name) {
        List<Stock> found = stockService.findByName(name);
        if (found.isEmpty()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(found);
        }
        return ResponseEntity.ok(found);
    }

    // ðŸ”¹ 7. FILTER BY PRICE RANGE
    @GetMapping("/filter")
    public ResponseEntity<List<Stock>> filterByPriceRange(
            @RequestParam double min,
            @RequestParam double max) {
        return ResponseEntity.ok(stockService.findByPriceRange(min, max));
    }

    // ðŸ”¹ 8. SORT ASC
    @GetMapping("/sort/asc")
    public ResponseEntity<List<Stock>> sortByPriceAsc() {
        return ResponseEntity.ok(stockService.getStocksSortedByPriceAsc());
    }

    // ðŸ”¹ 9. SORT DESC
    @GetMapping("/sort/desc")
    public ResponseEntity<List<Stock>> sortByPriceDesc() {
        return ResponseEntity.ok(stockService.getStocksSortedByPriceDesc());
    }

    // ðŸ”¹ 10. COUNT STOCKS
    @GetMapping("/count")
    public ResponseEntity<Long> countStocks() {
        return ResponseEntity.ok(stockService.count());
    }

    // ðŸ”¹ 11. CHECK EXISTENCE
    @GetMapping("/exists/{id}")
    public ResponseEntity<Boolean> existsById(@PathVariable long id) {
        return ResponseEntity.ok(stockService.existsById(id));
    }

 
}

--------------------------------------------------------------------------------------------
Response Entity -variations
--------------------------------------------------------------------------------------------
//Basic Successful Response (200 OK)

@GetMapping("/success")
public ResponseEntity<String> successResponse() {
    return ResponseEntity.ok("Everything is good");
}

// 2. Return Object with Status Code (201 Created)

@PostMapping("/create")
public ResponseEntity<Stock> createStock(@RequestBody Stock stock) {
    Stock saved = stockService.addStock(stock);
    return ResponseEntity.status(HttpStatus.CREATED).body(saved);
}


//3. Return No Content (204)

@PutMapping("/update/{id}")
public ResponseEntity<?> update(@PathVariable long id, @RequestBody Stock updatedStock) {
    boolean updated = stockService.updateStock(id, updatedStock);
    return updated ? ResponseEntity.noContent().build()
                   : ResponseEntity.notFound().build();
}


//Return Not Found (404)

@GetMapping("/{id}")
public ResponseEntity<Stock> getById(@PathVariable long id) {
    return stockService.getStockById(id)
            .map(ResponseEntity::ok)
            .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).body(null));
}

---------------------------------------------------------------------------------------------------------

 
